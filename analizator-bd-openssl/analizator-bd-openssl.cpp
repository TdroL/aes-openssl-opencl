#include "stdafx.h"
#include <fstream>
#include <sstream>
#include <cstdio>
#include <ctime>
#include <cstdint>
#include <openssl/evp.h>

#define KiB 1024
#define MiB (1024*KiB)

#define DATA_LENGTH 128

struct Encrypt_Data {
	unsigned int length;
	uint8_t key[32];
	uint8_t plaintext[DATA_LENGTH];
	uint8_t ciphertext[DATA_LENGTH];
};

int main (int argc, char **argv)
{
	Encrypt_Data data[] = {
		{
			32,
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},
			{
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87,
				0xdc, 0x95, 0xc0, 0x78, 0xa2, 0x40, 0x89, 0x89, 0xad, 0x48, 0xa2, 0x14, 0x92, 0x84, 0x20, 0x87
			}
		},
		{
			32,
			{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
			},
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},
			{
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
				0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0xa, 0x4, 0x83, 0x89, 0xad, 0xcb,
			}
		},
		{
			32,
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
				0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
				0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
			},
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},
			{
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
				0xf2, 0x90, 0x0, 0xb6, 0x2a, 0x49, 0x9f, 0xd0, 0xa9, 0xf3, 0x9a, 0x6a, 0xdd, 0x2e, 0x77, 0x80,
			}
		},
		{
			32,
			{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
				0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
				0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
				0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
				0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f
			},
			{
				0xb6, 0x5d, 0x30, 0x03, 0x0c, 0x88, 0xb4, 0x4c, 0x97, 0x5a, 0x34, 0x3f, 0x93, 0xfb, 0x3c, 0x09,
				0x61, 0x00, 0x66, 0x66, 0x01, 0x0c, 0x43, 0x37, 0x9e, 0xde, 0x85, 0x04, 0x82, 0x13, 0x92, 0x1f,
				0xab, 0x98, 0x7d, 0xa5, 0xc8, 0x88, 0x0a, 0xc6, 0x1c, 0xe7, 0xd1, 0x06, 0x90, 0x41, 0xbb, 0x96,
				0xc5, 0x36, 0x84, 0xda, 0x13, 0xc6, 0x7e, 0xe7, 0xb7, 0xcb, 0x68, 0x79, 0x5e, 0xec, 0xac, 0xe8,
				0x76, 0x95, 0xc5, 0xab, 0xe9, 0x06, 0xdb, 0xbb, 0x74, 0x4c, 0xa0, 0x82, 0x6e, 0x60, 0x1d, 0xff,
				0xc9, 0x63, 0x47, 0x06, 0xff, 0xe0, 0x44, 0xb6, 0x71, 0xe4, 0xa5, 0x25, 0x4d, 0xa2, 0x2e, 0xbb,
				0x44, 0x84, 0xf1, 0x50, 0x86, 0xbe, 0x08, 0x81, 0xab, 0xf4, 0x33, 0x9e, 0x59, 0x35, 0x63, 0xe2,
				0x4a, 0x0d, 0x5f, 0xf8, 0xf3, 0x17, 0xf1, 0x43, 0x1d, 0x8d, 0x6b, 0x16, 0x0e, 0x6b, 0x7e, 0x25
			}
		},
		{
			32,
			{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
			},
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
				0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
				0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
				0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
				0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f
			},
			{
				0xcd, 0x57, 0x1d, 0xc3, 0x1e, 0x42, 0x95, 0xa7, 0xb5, 0xc6, 0x24, 0xd6, 0x5d, 0x91, 0x4b, 0xb8,
				0x03, 0x5b, 0x92, 0x98, 0x4d, 0x22, 0x0c, 0x98, 0x63, 0xa0, 0x87, 0xbc, 0xb0, 0x04, 0x51, 0x7e,
				0x9a, 0x3d, 0xfb, 0x0e, 0x74, 0xab, 0x0f, 0xdf, 0x6c, 0x68, 0x64, 0x39, 0x0e, 0x22, 0xaf, 0x96,
				0x50, 0xa0, 0xc4, 0x34, 0x05, 0x19, 0xce, 0x51, 0x89, 0x3a, 0xf9, 0xb1, 0x64, 0x86, 0x9f, 0xf3,
				0xfa, 0x1c, 0xc8, 0x30, 0x64, 0xf6, 0x4a, 0x5a, 0x4b, 0x4b, 0x95, 0x28, 0x4c, 0x4d, 0x89, 0x36,
				0x66, 0x71, 0x25, 0x8d, 0xc7, 0xdb, 0xa5, 0x93, 0x62, 0x6e, 0x3e, 0x7b, 0x81, 0x97, 0xe9, 0x24,
				0x16, 0x41, 0x3a, 0xbd, 0x27, 0x7c, 0x6e, 0x0f, 0x8e, 0x62, 0x66, 0xf9, 0x5e, 0x8d, 0x16, 0x4e,
				0xe3, 0xa8, 0x03, 0x99, 0xca, 0x6b, 0x2a, 0x58, 0xfa, 0x18, 0xbf, 0x39, 0x79, 0x02, 0x07, 0x8a
			}
		},
		{
			32,
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
				0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
				0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
			},
			{
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
				0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
				0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
				0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
				0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f
			},
			{
				0x5a, 0x6e, 0x04, 0x57, 0x08, 0xfb, 0x71, 0x96, 0xf0, 0x2e, 0x55, 0x3d, 0x02, 0xc3, 0xa6, 0x92,
				0xe9, 0xc3, 0xef, 0x8a, 0xb2, 0x34, 0x53, 0xe6, 0xf0, 0x74, 0x9c, 0xd6, 0x36, 0xe7, 0xa8, 0x8e,
				0x61, 0xa6, 0x93, 0x6e, 0x4e, 0x8f, 0x10, 0x1c, 0x1c, 0xc1, 0xf9, 0x93, 0xb5, 0x42, 0xa0, 0xd4,
				0xe2, 0x74, 0x0e, 0x8a, 0xfa, 0xd4, 0xe4, 0xd1, 0x5d, 0x0d, 0x66, 0x1b, 0x38, 0x2e, 0xca, 0x89,
				0xa3, 0x7e, 0xdf, 0x3f, 0x97, 0x5a, 0xba, 0xef, 0x93, 0x7b, 0x62, 0xc7, 0x8d, 0x5b, 0xb1, 0x57,
				0x97, 0x4b, 0x41, 0x27, 0x38, 0xe5, 0x0f, 0x45, 0xc7, 0xf9, 0xdb, 0x25, 0x41, 0x3f, 0x27, 0x4b,
				0xd0, 0xa2, 0x00, 0xfe, 0xf4, 0x69, 0x24, 0xa4, 0xb8, 0x2d, 0xff, 0xf8, 0x53, 0x8e, 0xc1, 0xb6,
				0xc7, 0x77, 0xf1, 0xa7, 0x55, 0x2d, 0x56, 0x07, 0x22, 0xae, 0x16, 0x5c, 0x4a, 0x05, 0x1e, 0x67
			}
		}
		,{0}
	};

	for (int i = 0; data[i].length; i++)
	{
		EVP_CIPHER_CTX ctx;
		EVP_CIPHER_CTX_init(&ctx);
		EVP_EncryptInit_ex(&ctx, EVP_aes_256_ecb(), NULL, data[i].key, NULL);

		int len = 128;

		EVP_EncryptUpdate(&ctx, data[i].ciphertext, &len, data[i].plaintext, len);

		printf("{\n\t%u,\n\t{", data[i].length);

		for (int j = 0; j < 8*4; j++)
		{
			if (j % 8 == 0)
			{
				printf("\n\t\t");
			}
			printf("0x%02x, ", data[i].key[j]);
		}

		printf("\n\t},\n\t{");

		for (int j = 0; j < 16*8; j++)
		{
			if (j % 16 == 0)
			{
				printf("\n\t\t");
			}
			printf("0x%02x, ", data[i].plaintext[j]);
		}

		printf("\n\t},\n\t{");

		for (int j = 0; j < 16*8; j++)
		{
			if (j % 16 == 0)
			{
				printf("\n\t\t");
			}
			printf("0x%02x, ", data[i].ciphertext[j]);
		}

		printf("\n\t}\n},\n");
	}

	return 0;

	unsigned int size_of_data = 1 * MiB;
	unsigned int loops = 256;

	// analizator 1024 # 1 KiB
	if (argc > 1)
	{
		size_of_data = atoi(argv[1]);
	}

	// analizator 16 M # 16 * MiB
	if (argc > 2)
	{
		switch (argv[2][0])
		{
		case 'm':
		case 'M':
			size_of_data *= MiB;
		break;
		case 'k':
		case 'K':
			size_of_data *= KiB;
		break;
		}
	}

	// analizator 1 K 1024 # 1 KiB, 1000 loops
	if (argc > 3)
	{
		loops = atoi(argv[3]);
	}

	std::stringstream results;
	std::fstream f;

	results << "./results-bd-openssl/";

	if (size_of_data >= MiB)
	{
		printf("Seria: %iMiB\n", (size_of_data / MiB));
		results << (size_of_data / MiB) << "MiB.txt";
	}
	else if (size_of_data >= KiB)
	{
		printf("Seria: %iKiB\n", size_of_data);
		results << size_of_data << "KiB.txt";
	}
	else
	{
		printf("Seria: %iB\n", size_of_data);
		results << size_of_data << "B.txt";
	}

	f.open(results.str(), std::fstream::out | std::fstream::trunc);

	if ( ! f.is_open())
	{
		printf("Nie mozna otworzyc %s\n", results.str().c_str());
		exit(EXIT_FAILURE);
	}

	for (unsigned int i = 0; i < loops; i++)
	{
		unsigned char *inbuf = new unsigned char[size_of_data];
		unsigned char *outbuf = new unsigned char[size_of_data];
		int inlen = size_of_data,
			outlen = 0;

		// fill input buffer
		memset(inbuf, i, sizeof(unsigned char) * size_of_data);

		// simple key and iv
		unsigned char key[] = {	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };
		unsigned char iv[] = { 1,2,3,4,5,6,7,8 };

		clock_t start, end;

		// init encrypt context
		EVP_CIPHER_CTX ctx;
		EVP_CIPHER_CTX_init(&ctx);
		EVP_EncryptInit_ex(&ctx, EVP_aes_256_ecb(), NULL, key, iv);

		// encrypt
		start = clock();
		int status = EVP_EncryptUpdate(&ctx, outbuf, &outlen, inbuf, inlen);
		end = clock();

		if ( ! status)
		{
			printf("Error: EVP_EncryptUpdate\n");
			return 0;
		}
			
		delete[] inbuf;
		delete[] outbuf;
		EVP_CIPHER_CTX_cleanup(&ctx);

		printf("\r%i/%i", i+1, loops);

		f << (end - start) << "\n";

		// fake sleep
		while ((clock() - end) < (10 * CLOCKS_PER_SEC / 1000));
	}

	printf("\r                                \r");
	f.close();

	//system("pause");
	return EXIT_SUCCESS;
}